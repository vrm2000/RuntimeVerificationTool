package Parsing;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.io.PrintWriter;
import java.io.FileNotFoundException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\006\005\000\002\002\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\005\000\002\007\010" +
    "\000\002\007\006\000\002\010\010\000\002\010\006\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\012\010\005\011\012\012\011\014\010\001" +
    "\002\000\020\004\uffec\005\uffec\010\uffec\011\uffec\012\uffec" +
    "\014\uffec\030\uffec\001\002\000\020\004\uffea\005\uffea\010" +
    "\uffea\011\uffea\012\uffea\014\uffea\030\uffea\001\002\000\020" +
    "\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\030" +
    "\uffeb\001\002\000\020\004\040\005\043\010\005\011\012" +
    "\012\011\014\010\030\044\001\002\000\012\010\005\011" +
    "\012\012\011\014\010\001\002\000\004\016\030\001\002" +
    "\000\004\016\022\001\002\000\012\002\017\006\015\007" +
    "\020\013\014\001\002\000\012\010\uffed\011\uffed\012\uffed" +
    "\014\uffed\001\002\000\012\010\uffef\011\uffef\012\uffef\014" +
    "\uffef\001\002\000\012\010\005\011\012\012\011\014\010" +
    "\001\002\000\004\002\000\001\002\000\012\010\uffee\011" +
    "\uffee\012\uffee\014\uffee\001\002\000\014\002\001\006\015" +
    "\007\020\013\014\015\001\001\002\000\004\030\023\001" +
    "\002\000\006\017\024\020\025\001\002\000\020\004\ufff9" +
    "\005\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\030\ufff9\001" +
    "\002\000\004\030\026\001\002\000\004\017\027\001\002" +
    "\000\020\004\ufffa\005\ufffa\010\ufffa\011\ufffa\012\ufffa\014" +
    "\ufffa\030\ufffa\001\002\000\004\030\031\001\002\000\006" +
    "\017\033\020\032\001\002\000\004\030\034\001\002\000" +
    "\020\004\ufffb\005\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb" +
    "\030\ufffb\001\002\000\004\017\035\001\002\000\020\004" +
    "\ufffc\005\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\030\ufffc" +
    "\001\002\000\012\006\015\007\020\013\014\015\037\001" +
    "\002\000\014\002\ufffd\006\ufffd\007\ufffd\013\ufffd\015\ufffd" +
    "\001\002\000\014\002\ufff7\006\ufff7\007\ufff7\013\ufff7\015" +
    "\ufff7\001\002\000\014\002\ufffe\006\ufffe\007\ufffe\013\ufffe" +
    "\015\ufffe\001\002\000\014\002\uffff\006\015\007\020\013" +
    "\014\015\uffff\001\002\000\014\002\ufff6\006\ufff6\007\ufff6" +
    "\013\ufff6\015\ufff6\001\002\000\016\021\051\022\045\023" +
    "\053\024\050\025\047\026\046\001\002\000\004\027\ufff3" +
    "\001\002\000\004\027\ufff0\001\002\000\004\027\ufff1\001" +
    "\002\000\004\027\ufff4\001\002\000\004\027\ufff5\001\002" +
    "\000\004\027\054\001\002\000\004\027\ufff2\001\002\000" +
    "\014\002\ufff8\006\ufff8\007\ufff8\013\ufff8\015\ufff8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\012\005\006\006\012\007\003\010\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\040\005\006\006\041\007\003\010\005\001" +
    "\001\000\012\005\006\006\035\007\003\010\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\006" +
    "\006\020\007\003\010\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\015\001\001\000\002\001\001\000\004\002\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
				int id = 1 ;
				Map<Integer, String> valores = new HashMap<>();
				Escritor_Fichero ef = new Escritor_Fichero("arbol.txt");
			
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expresion ::= expresion op_binario expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																		Scanner sc = new Scanner(opb); 
																		Scanner sc1 = new Scanner(e1); 
																		Scanner sc2 = new Scanner(e2); 
																		int id = sc.nextInt();
																		int id1 = sc1.nextInt();
																		int id2 = sc2.nextInt();
																		ef.escritor(opb + "  LEFT: " + id1 + " RIGHT: " + id2);
																	valores.put(id, sc.nextLine() + " " + id1 + " " + id2);
																	sc.close();
																	sc1.close();
																	sc2.close();
																	RESULT = opb + " " +id1 + " " + id2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expresion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expresion ::= op_unario expresion 
            {
              String RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																	Scanner sc = new Scanner(opu); 
																	Scanner sc1 = new Scanner(e1);
																	int id = sc.nextInt();
																	int id1 = sc1.nextInt();
																	ef.escritor(opu + "  LEFT: " + id1);
																	valores.put(id, sc.nextLine() + " " + id1);
																	sc.close();
																	sc1.close();
																	RESULT = opu + " " +id1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= op_unario phi 
            {
              String RESULT =null;
		int opuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String prop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Scanner sc = new Scanner(opu); 
																	Scanner sc1 = new Scanner(prop); 
																	int id = sc.nextInt();
																	int id1 = sc1.nextInt();
																	ef.escritor(opu + "  LEFT: " + id1);
																	String res = "PHI " + sc1.nextLine();
																	ef.escritor(id1 + "  " + res);
																	valores.put(id, sc.nextLine() + " " + id1);
																	valores.put(id1, res);
																	sc.close();
																	sc1.close();
																	RESULT = opu + " " +id1 + "\n" + id1 + res;
																	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= AP expresion CP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // always ::= ALWAYS_ AC CHARTEXT COMA CHARTEXT CC 
            {
              String RESULT =null;
		int ct1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ct1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ct1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ct2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ct2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ct2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "2 " + ct1 + " " + ct2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("always",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // always ::= ALWAYS_ AC CHARTEXT CC 
            {
              String RESULT =null;
		int ct1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ct1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ct1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "1 " + ct1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("always",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // eventually ::= EVENTUALLY_ AC CHARTEXT COMA CHARTEXT CC 
            {
              String RESULT =null;
		int ct1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ct1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ct1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ct2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ct2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ct2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "2 " + ct1 + " " + ct2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventually",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // eventually ::= EVENTUALLY_ AC CHARTEXT CC 
            {
              String RESULT =null;
		int ct1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ct1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ct1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "1 " + ct1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventually",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // phi ::= CHARTEXT op NUM 
            {
              String RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ct = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id + " " + ct + " " + o + " " + valor; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // phi ::= TRUE 
            {
              String RESULT =null;
		RESULT = id + " TRUE"; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // phi ::= FALSE 
            {
              String RESULT =null;
		RESULT = id + " FALSE"; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("phi",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // op ::= MAYOR 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op ::= MENOR 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op ::= MAYEQ 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op ::= MENEQ 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op ::= IGUAL 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op ::= DESIGUAL 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op_binario ::= AND 
            {
              String RESULT =null;
		RESULT = id +" AND"; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_binario",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op_binario ::= OR 
            {
              String RESULT =null;
		RESULT = id + " OR"; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_binario",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_binario ::= IMPLIES 
            {
              String RESULT =null;
		RESULT = id + " IMPLIES"; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_binario",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_unario ::= always 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  id + " Always_ " + al; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_unario ::= eventually 
            {
              String RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ev = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id + " Eventually_ " + ev; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_unario ::= NOT 
            {
              String RESULT =null;
		RESULT = id + " NOT "; id++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
